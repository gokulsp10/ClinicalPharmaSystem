@model ClinicalPharmaSystem.Models.Appointment
@{
    Layout = null;
}

@{
    ViewBag.Title = "Create Appointment";
}

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            background-color: #f5f5f5;
        }

        .container {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-top: 50px;
        }

        h2 {
            text-align: center;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .control-label {
            font-weight: bold;
        }

        .form-control {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .btn-primary {
            background-color: #007bff;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            color: #fff;
        }

            .btn-primary:hover {
                background-color: #0056b3;
            }

        .time-picker {
            width: 300px;
        }

            .time-picker input.active:focus {
                outline: none !important;
            }

            .time-picker input.active {
                border: 1px solid red;
            }

            .time-picker input {
                display: block;
            }

        .time-picker {
            position: relative;
            display: block;
        }

        .suggestions {
            position: absolute;
            border: 1px solid #ddd;
            clear: both;
            max-height: 150px;
            overflow-y: scroll;
            width: 252px;
            background: #fff;
            z-index: 999;
            display: none;
            list-style-type: none;
            margin: 0;
            padding: 0;
        }

            .suggestions li {
                border-bottom: 1px solid #e2e2e2;
                padding: 10px;
            }

                .suggestions li:hover {
                    background-color: #5897fb;
                    color: #fff;
                }
        /* The Modal (background) */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0, 0, 0, 0.7); /* Black background with transparency */
        }

        /* Modal Content */
        .modal-content {
            background-color: #fff;
            margin: 15% auto; /* 15% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 60%; /* Could be adjusted to your needs */
        }

        /* Close Button */
        .close {
            position: absolute;
            right: 10px;
            top: 10px;
            color: #000;
            font-size: 30px;
            font-weight: bold;
            cursor: pointer;
        }

        .available {
            border: 2px solid green;
        }

        .unavailable {
            border: 2px solid red;
        }

    </style>
</head>
<body>
    <div class="container">
        <h2>Create Appointment</h2>

        @using (Html.BeginForm("Create", "Appointment", FormMethod.Post, new { @class = "form", id = "appointment-form" }))
        {
            @Html.AntiForgeryToken()

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.AppointmentDate, new { @class = "control-label" })
                        @Html.EditorFor(model => model.AppointmentDate, new { htmlAttributes = new { @class = "form-control", type = "date", id = "AppointmentDate" } })
                    </div>
                </div>
            </div>

            <div class="row">

                <div class="col-md-3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.AppointmentTime, new { @class = "control-label" })
                        <div class="time-picker-container">
                            <input id="hour-input" class="form-control" required type="text" onkeyup="filter(this.value)" onfocus="suggestion = true" autocomplete="off">
                            @Html.HiddenFor(model => model.AppointmentTime, new { id = "hidden-appointment-time" }) <!-- Hidden input for time -->
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <ul id="list" class="suggestions list-style-none padding-0"></ul>
                            </div>
                            <div style="width: 500px;margin-left: 157px;margin-top: 15px;" class="col-md-6">
                                <div style="margin-left: 140px;width: 350px;" id="timepickererrId" class="error"></div>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="col-md-3">
                    <div class="col-md-4">
                        <button style="width: max-content;margin-top:30px" type="button" id="check-availability-button" onclick="validateappointment()" class="btn btn-primary">Check Availability</button>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.MobileNumber, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.MobileNumber, new { @class = "form-control", type = "tel", placeholder = "Enter your mobile number", required = "required" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Notes, new { @class = "control-label" })
                        @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control", style = "height:100px;", required = "required" } })
                    </div>
                </div>
            </div>


            <div class="row">
                <div class="col-md-12">
                    <button type="submit" id="save-button" disabled class="btn btn-primary">Save</button>
                </div>
            </div>
        }
    </div>




    <div id="availability-dialog" class="modal">
        <div class="modal-content">
            <span class="close" id="close-button">&times;</span>
            <h3>Availability Status</h3>
            <div id="availability-message" class="form-group">
                Availability: <span id="availability-status"></span>
            </div>
        </div>
    </div>


    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.js"></script>
    <script>
        $(document).ready(function () {
            // Get the current date and format it as YYYY-MM-DD
            var currentDate = new Date();
            var year = currentDate.getFullYear();
            var month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
            var day = currentDate.getDate().toString().padStart(2, '0');
            var formattedDate = year + '-' + month + '-' + day;

            // Set the value of the AppointmentDate input to today's date
            $('#AppointmentDate').val(formattedDate);
        });

        </script>
    <script>
        $(document).ready(function () {
            $("#submit-button").click(function () {
                // Serialize the form data
                var formData = $("#appointment-form").serialize();

                // Make an AJAX post request to submit the form
                $.post({
                    url: "@Url.Action("Create", "Appointment")",
                    data: formData,
                    success: function (data) {
                        console.log(data);
                        if (data === "success") {
                            // Display a success toast message
                            toastr.success("Form submitted successfully");
                        } else {
                            // Handle errors if needed
                            toastr.error("Form submission failed");
                        }
                    },
                    error: function () {
                        toastr.error("An error occurred while submitting the form");
                    }
                });
            });
        });
    </script>


    <script>
        $(document).ready(function () {
            $("#hour-input").on("input", function () {
                var hourInputValue = $(this).val();

                if (hourInputValue.trim() === "") {
                    document.getElementById('check-availability-button').setAttribute('disabled', 'disabled');
                    // If the input is blank or contains only whitespace
                    $("#hidden-appointment-time").val("");
                }
            });
        });

        // Get the modal and close button
        var modal = document.getElementById('availability-dialog');
        var closeButton = document.getElementById('close-button');

        // Function to open the modal
        function openModal() {
            modal.style.display = 'block';
        }

        // Function to close the modal
        function closeModal() {
            modal.style.display = 'none';
        }

        // Listen for clicks on the close button
        closeButton.addEventListener('click', closeModal);

        // Example: Open the modal when availability message updates
        var availabilityStatus = document.getElementById('availability-status');
        availabilityStatus.addEventListener('click', openModal);

    </script>
    <script>
        function validateappointment() {
            var dateInput = document.getElementById('AppointmentDate');
            var appointmentDate = dateInput.value;
            var appointmentTime = $("#hidden-appointment-time").val();

            if (appointmentDate && appointmentTime) {
                // Parse the date
                var selectedDate = new Date(appointmentDate);

                // Parse the time in 12-hour format
                var timeParts = appointmentTime.split(' ');
                var time = timeParts[0];
                var ampm = timeParts[1];
                var timeParts24 = time.split(':');
                var hours = parseInt(timeParts24[0]);
                var minutes = parseInt(timeParts24[1]);

                // Convert to 24-hour format if needed
                if (ampm.toLowerCase() === 'pm' && hours < 12) {
                    hours += 12;
                } else if (ampm.toLowerCase() === 'am' && hours === 12) {
                    hours = 0;
                }

                // Set the time components in the selectedDate
                selectedDate.setHours(hours);
                selectedDate.setMinutes(minutes);

                // Get the current date and time in the local timezone
                var currentDate = new Date();

                if (selectedDate > currentDate) {
                    // Make an AJAX GET request
                    $.get("/Appointment/CheckAvailability", { appointmentDate: appointmentDate, appointmentTime: appointmentTime }, function (data) {
                        // Update the availability message based on the response
                        var availabilityStatus = document.getElementById('availability-status');
                        var availabilityMessage = document.getElementById('availability-message');
                        var saveButton = document.getElementById('save-button');
                        availabilityStatus.innerText = data;
                        if (data === "Available") {
                            availabilityMessage.classList.remove("unavailable");
                            availabilityMessage.classList.add("available");
                            saveButton.removeAttribute('disabled');
                        } else {
                            availabilityMessage.classList.remove("available");
                            availabilityMessage.classList.add("unavailable");
                            document.getElementById('check-availability-button').setAttribute('disabled', 'disabled');
                        }
                        openModal();
                    });
                } else {
                    // Handle the case where the selected date and time are in the past
                    $('.error').html('Selected date and time are in the past. Please choose a future date and time.').addClass('alert alert-danger');
                    document.getElementById('check-availability-button').setAttribute('disabled', 'disabled');
                }
            } else {
                $('.error').html('Please select Date and Time.').addClass('alert alert-danger');
                document.getElementById('check-availability-button').setAttribute('disabled', 'disabled');
            }
        }


     </script>
    <script>
        // Get the current date and format it as YYYY-MM-DD
        var currentDate = new Date();
        var year = currentDate.getFullYear();
        var month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
        var day = currentDate.getDate().toString().padStart(2, '0');
        var formattedDate = year + '-' + month + '-' + day;

        // Set the minimum date for the AppointmentDate input
        document.getElementById('AppointmentDate').setAttribute('min', formattedDate);
    </script>

    <script>
        function enableCheckAvailabilityButton() {
            var appointmentDate = document.getElementById('AppointmentDate').value;
            var checkAvailabilityButton = document.getElementById('check-availability-button');
            var hourinput =document.getElementById('hour-input').value;

            if (appointmentDate !== '' && hourinput !== '') {
                console.log('valid');
                checkAvailabilityButton.removeAttribute('disabled');
            } else {
                console.log('In valid'); 
                checkAvailabilityButton.setAttribute('disabled', 'disabled');
            }
        }



        // Call the function initially to set the button state
        enableCheckAvailabilityButton();

        // Attach event listeners to the date and time inputs to update the button state
        document.getElementById('AppointmentDate').addEventListener('input', enableCheckAvailabilityButton);
        document.getElementById('hour-input').addEventListener('input', enableCheckAvailabilityButton);
    </script>
    <script>
        // Time picker logic
        var query = '';
        var hours = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
        var hours24 = ['13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24'];
        var hoursUpdated = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
        var minutes = ['00', '30'];
        var format = ['AM', 'PM'];
        var time;
        var timeArray = [];
        var items = [];
        var error;
        var errorMessage;
        var list = $('#list');

        itemList(hours, minutes, format, time, timeArray);

        function itemList(hours, minutes, format, time, timeArray) {
            hours.map(i => {
                minutes.map(j => {
                    format.map(k => {
                        time = i + ":" + j + " " + k;
                        timeArray.push(time);
                        this.timeArray = timeArray;
                    });
                });
            });
        }

        function querySubset(query) {
            this.query = query.toLowerCase();
            this.hour = query.substring(0, 2);
            this.timeSelector = query.substring(2, 3);
            this.minute = query.substring(3, 5);
            this.formatSelector = query.substring(5, 6);
            this.formatUpdated = query.substring(6, 8);
        }

        function hoursUpdate(input) {
            this.hours24.map((value, i) => {
                if (input === value) {
                    this.query = this.hoursUpdated[i];
                    $("#hour-input").val(this.query);
                }
            });
        }

        function bindResult() {
            list.show();
            this.error = false;
            $('#hour-input').removeClass('active');
            $('.error').html('').removeClass("alert alert-danger");
            document.getElementById('check-availability-button').removeAttribute('disabled');
            this.items = this.timeArray.filter(function (jam) {
                return jam.indexOf(this.query) > -1;
            }.bind(this));

            list.empty();
            this.items.forEach(function (hour, i) {
                var entry = document.createElement('li');
                entry.append(document.createTextNode(hour));
                entry.id = i;
                entry.setAttribute("onclick", "select('" + hour + "')");
                list.append(entry);
            });
        }

        function onErrorResult(errorMes) {
            this.error = true;
            this.errorMessage = errorMes;
            $('.time-picker').attr('data-original-title', this.errorMessage);
            $('.error').html(this.errorMessage).addClass('alert alert-danger');
            $('#hour-input').addClass('active');
        }

        function filter(query) {
            if (query !== "") {
                querySubset(query);
                if (!isNaN(this.hour)) {
                    hoursUpdate(this.hour);
                    // Instead of directly setting the input value, you can use the following lines to preserve the format
                    $("#hour-input").val(this.hour + this.timeSelector + this.minute + this.formatSelector + this.formatUpdated);
                    bindResult();
                    if (this.timeSelector === ":") {
                        bindResult();
                        if (this.minute !== "") {
                            if (!isNaN(this.minute))
                                bindResult();
                            if (this.formatSelector === " ") {
                                bindResult();
                                if (this.formatUpdated === "am" || this.formatUpdated === "pm") {
                                    bindResult();
                                } else {
                                    // errorMessage = "Define am/pm";
                                    document.getElementById('check-availability-button').setAttribute('disabled', 'disabled');                                    
                                    errorMessage = "Invalid Time";
                                    onErrorResult(errorMessage);
                                }
                            } else {
                                // errorMessage = "Use space before am/pm";
                                document.getElementById('check-availability-button').setAttribute('disabled', 'disabled');
                                errorMessage = "Invalid Time";
                                onErrorResult(errorMessage);
                            }
                        } else {
                            // errorMessage = "Fill your minute with a number";
                            document.getElementById('check-availability-button').setAttribute('disabled', 'disabled');
                            errorMessage = "Invalid Time";
                            onErrorResult(errorMessage);
                        }
                    } else {
                        // errorMessage = "Use ' : ' between hour and minute";
                        document.getElementById('check-availability-button').setAttribute('disabled', 'disabled');
                        errorMessage = "Invalid Time";
                        onErrorResult(errorMessage);
                    }
                } else {
                    // errorMessage = "Fill your hour with a number";
                    document.getElementById('check-availability-button').setAttribute('disabled', 'disabled');
                    errorMessage = "Invalid Time";
                    onErrorResult(errorMessage);
                }
            } else {
                this.error = false;
                this.errorMessage = "";
                $('.error').html('').removeClass("alert alert-danger");
                $('.error').html('').removeClass("alert alert-danger");
                $('#hour-input').removeClass('active');
                document.getElementById('check-availability-button').removeAttribute('disabled');
                this.items = [];
            }
        }


        function select(item) {
            list.hide();
            this.error = false;
            this.errorMessage = "";
            this.query = item;
            $("#hidden-appointment-time").val(item);
            $("#hour-input").val(this.query);
            $('#hour-input').removeClass('active');
            $('.error').html('').removeClass("alert alert-danger");
            document.getElementById('check-availability-button').removeAttribute('disabled');
            this.items = [];
        }
    </script>

</body>
</html>
